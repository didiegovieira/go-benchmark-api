// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/route/route_interface.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/route/route_interface.go -destination=test/mocks/route_route_mock.go -package mocks -mock_names=RouteInterface=MockRouteRouteInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	route "github.com/didiegovieira/go-benchmark-api/pkg/route"
	gomock "go.uber.org/mock/gomock"
)

// MockRouteRouteInterface is a mock of RouteInterface interface.
type MockRouteRouteInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRouteRouteInterfaceMockRecorder
}

// MockRouteRouteInterfaceMockRecorder is the mock recorder for MockRouteRouteInterface.
type MockRouteRouteInterfaceMockRecorder struct {
	mock *MockRouteRouteInterface
}

// NewMockRouteRouteInterface creates a new mock instance.
func NewMockRouteRouteInterface(ctrl *gomock.Controller) *MockRouteRouteInterface {
	mock := &MockRouteRouteInterface{ctrl: ctrl}
	mock.recorder = &MockRouteRouteInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteRouteInterface) EXPECT() *MockRouteRouteInterfaceMockRecorder {
	return m.recorder
}

// GetRoute mocks base method.
func (m *MockRouteRouteInterface) GetRoute() route.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute")
	ret0, _ := ret[0].(route.Route)
	return ret0
}

// GetRoute indicates an expected call of GetRoute.
func (mr *MockRouteRouteInterfaceMockRecorder) GetRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*MockRouteRouteInterface)(nil).GetRoute))
}
