// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/base/repository.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/base/repository.go -destination=test/mocks/base_repository.go -package mocks -mock_names==MockBase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository[M any] struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder[M]
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder[M any] struct {
	mock *MockRepository[M]
}

// NewMockRepository creates a new mock instance.
func NewMockRepository[M any](ctrl *gomock.Controller) *MockRepository[M] {
	mock := &MockRepository[M]{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder[M]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository[M]) EXPECT() *MockRepositoryMockRecorder[M] {
	return m.recorder
}

// DeleteOneById mocks base method.
func (m *MockRepository[M]) DeleteOneById(ctx context.Context, id any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneById indicates an expected call of DeleteOneById.
func (mr *MockRepositoryMockRecorder[M]) DeleteOneById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneById", reflect.TypeOf((*MockRepository[M])(nil).DeleteOneById), ctx, id)
}

// FindOneById mocks base method.
func (m *MockRepository[M]) FindOneById(ctx context.Context, id any) (M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneById", ctx, id)
	ret0, _ := ret[0].(M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneById indicates an expected call of FindOneById.
func (mr *MockRepositoryMockRecorder[M]) FindOneById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneById", reflect.TypeOf((*MockRepository[M])(nil).FindOneById), ctx, id)
}

// InsertOne mocks base method.
func (m *MockRepository[M]) InsertOne(ctx context.Context, model M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockRepositoryMockRecorder[M]) InsertOne(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockRepository[M])(nil).InsertOne), ctx, model)
}

// UpInsert mocks base method.
func (m *MockRepository[M]) UpInsert(ctx context.Context, id any, model M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpInsert", ctx, id, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpInsert indicates an expected call of UpInsert.
func (mr *MockRepositoryMockRecorder[M]) UpInsert(ctx, id, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpInsert", reflect.TypeOf((*MockRepository[M])(nil).UpInsert), ctx, id, model)
}
