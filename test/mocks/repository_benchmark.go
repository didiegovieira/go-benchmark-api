// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/repository/benchmark.go
//
// Generated by this command:
//
//	mockgen -source=./internal/application/repository/benchmark.go -destination=test/mocks/repository_benchmark.go -package mocks -mock_names=BenchmarkRepository=MockRepositoryBenchmarkRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/didiegovieira/go-benchmark-api/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryBenchmarkRepository is a mock of BenchmarkRepository interface.
type MockRepositoryBenchmarkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryBenchmarkRepositoryMockRecorder
}

// MockRepositoryBenchmarkRepositoryMockRecorder is the mock recorder for MockRepositoryBenchmarkRepository.
type MockRepositoryBenchmarkRepositoryMockRecorder struct {
	mock *MockRepositoryBenchmarkRepository
}

// NewMockRepositoryBenchmarkRepository creates a new mock instance.
func NewMockRepositoryBenchmarkRepository(ctrl *gomock.Controller) *MockRepositoryBenchmarkRepository {
	mock := &MockRepositoryBenchmarkRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryBenchmarkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryBenchmarkRepository) EXPECT() *MockRepositoryBenchmarkRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepositoryBenchmarkRepository) Get(id string) (*entity.Benchmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Benchmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryBenchmarkRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoryBenchmarkRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockRepositoryBenchmarkRepository) GetAll(benchmarkName string) ([]*entity.Benchmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", benchmarkName)
	ret0, _ := ret[0].([]*entity.Benchmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryBenchmarkRepositoryMockRecorder) GetAll(benchmarkName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepositoryBenchmarkRepository)(nil).GetAll), benchmarkName)
}

// Save mocks base method.
func (m *MockRepositoryBenchmarkRepository) Save(benchmark *entity.Benchmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", benchmark)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryBenchmarkRepositoryMockRecorder) Save(benchmark any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepositoryBenchmarkRepository)(nil).Save), benchmark)
}
