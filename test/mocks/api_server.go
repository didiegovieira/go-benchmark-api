// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/server.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/api/server.go -destination=test/mocks/api_server.go -package mocks -mock_names==MockApi
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServer is a mock of Server interface.
type MockServer[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder[T]
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder[T any] struct {
	mock *MockServer[T]
}

// NewMockServer creates a new mock instance.
func NewMockServer[T any](ctrl *gomock.Controller) *MockServer[T] {
	mock := &MockServer[T]{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer[T]) EXPECT() *MockServerMockRecorder[T] {
	return m.recorder
}

// GetRouter mocks base method.
func (m *MockServer[T]) GetRouter() T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouter")
	ret0, _ := ret[0].(T)
	return ret0
}

// GetRouter indicates an expected call of GetRouter.
func (mr *MockServerMockRecorder[T]) GetRouter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouter", reflect.TypeOf((*MockServer[T])(nil).GetRouter))
}

// Shutdown mocks base method.
func (m *MockServer[T]) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServerMockRecorder[T]) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockServer[T])(nil).Shutdown), ctx)
}

// Start mocks base method.
func (m *MockServer[T]) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServerMockRecorder[T]) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServer[T])(nil).Start))
}
