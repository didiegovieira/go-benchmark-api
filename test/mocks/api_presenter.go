// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/api/presenter.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/api/presenter.go -destination=test/mocks/api_presenter.go -package mocks -mock_names=Presenter=MockApiPresenter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockApiPresenter is a mock of Presenter interface.
type MockApiPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockApiPresenterMockRecorder
}

// MockApiPresenterMockRecorder is the mock recorder for MockApiPresenter.
type MockApiPresenterMockRecorder struct {
	mock *MockApiPresenter
}

// NewMockApiPresenter creates a new mock instance.
func NewMockApiPresenter(ctrl *gomock.Controller) *MockApiPresenter {
	mock := &MockApiPresenter{ctrl: ctrl}
	mock.recorder = &MockApiPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiPresenter) EXPECT() *MockApiPresenterMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockApiPresenter) Error(c *gin.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", c, err)
}

// Error indicates an expected call of Error.
func (mr *MockApiPresenterMockRecorder) Error(c, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockApiPresenter)(nil).Error), c, err)
}

// Present mocks base method.
func (m *MockApiPresenter) Present(c *gin.Context, body any, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Present", c, body, code)
}

// Present indicates an expected call of Present.
func (mr *MockApiPresenterMockRecorder) Present(c, body, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockApiPresenter)(nil).Present), c, body, code)
}
