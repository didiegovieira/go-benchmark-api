// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/base/usecase.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/base/usecase.go -destination=test/mocks/base_usecase.go -package mocks -mock_names==MockBase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase[I any, O any] struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder[I, O]
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder[I any, O any] struct {
	mock *MockUseCase[I, O]
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase[I any, O any](ctrl *gomock.Controller) *MockUseCase[I, O] {
	mock := &MockUseCase[I, O]{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder[I, O]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase[I, O]) EXPECT() *MockUseCaseMockRecorder[I, O] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUseCase[I, O]) Execute(ctx context.Context, input I) (O, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(O)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockUseCaseMockRecorder[I, O]) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUseCase[I, O])(nil).Execute), ctx, input)
}
