// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/didiegovieira/go-benchmark-api/internal/application/use_case"
	"github.com/didiegovieira/go-benchmark-api/internal/application/use_case/sorting_algorithm"
	"github.com/didiegovieira/go-benchmark-api/pkg/config"
	"github.com/didiegovieira/go-benchmark-api/pkg/route"
)

// Injectors from wire.go:

func InitializeDependencyContainer() (DependencyContainer, error) {
	conf := config.LoadConfig()
	healthRoute := provideHealthRoute()
	client := provideMongoDbClient(conf)
	benchmarkRepositoryInterface := provideBenchmarkRepository(client, conf)
	timeCalculateUseCaseInterface := provideTimeCalculateUseCase()
	bubbleSortUseCaseInterface := provideBubbleSortUseCase()
	insertionSortUseCaseInterface := provideInsertionSortUseCase()
	mergeSortUseCaseInterface := provideMergeSortUseCase()
	quickSortUseCaseInterface := provideQuickSortUseCase()
	selectionSortUseCaseInterface := provideSelectionSortUseCase()
	postSortingAlgorithmUseCaseInterface := providePostSortingAlgorithmUseCase(benchmarkRepositoryInterface, timeCalculateUseCaseInterface, bubbleSortUseCaseInterface, insertionSortUseCaseInterface, mergeSortUseCaseInterface, quickSortUseCaseInterface, selectionSortUseCaseInterface)
	postSortingAlgorithmRoute := providePostSortingAlgorithm(postSortingAlgorithmUseCaseInterface)
	v := provideRoutes(healthRoute, postSortingAlgorithmRoute)
	dependencyContainer := newDependencyContainer(conf, v, postSortingAlgorithmUseCaseInterface, timeCalculateUseCaseInterface, bubbleSortUseCaseInterface, insertionSortUseCaseInterface, mergeSortUseCaseInterface, quickSortUseCaseInterface, selectionSortUseCaseInterface)
	return dependencyContainer, nil
}

// wire.go:

type DependencyContainer struct {
	Configs *config.Conf

	Routes []route.RouteInterface

	PostSortingAlgorithmUseCase usecase.PostSortingAlgorithmUseCaseInterface
	TimeCalculateUseCase        usecase.TimeCalculateUseCaseInterface
	BubbleSortUseCase           sortingalgorithm.BubbleSortUseCaseInterface
	InsertionSortUseCase        sortingalgorithm.InsertionSortUseCaseInterface
	MergeSortUseCase            sortingalgorithm.MergeSortUseCaseInterface
	QuickSortUseCase            sortingalgorithm.QuickSortUseCaseInterface
	SelectionSortUseCase        sortingalgorithm.SelectionSortUseCaseInterface
}

func newDependencyContainer(
	configs *config.Conf,

	routes []route.RouteInterface,

	postSortingAlgorithmUseCase usecase.PostSortingAlgorithmUseCaseInterface,
	timeCalculateUseCase usecase.TimeCalculateUseCaseInterface,
	bubbleSortUseCase sortingalgorithm.BubbleSortUseCaseInterface,
	insertionSortUseCase sortingalgorithm.InsertionSortUseCaseInterface,
	mergeSortUseCase sortingalgorithm.MergeSortUseCaseInterface,
	quickSortUseCase sortingalgorithm.QuickSortUseCaseInterface,
	selectionSortUseCase sortingalgorithm.SelectionSortUseCaseInterface,

) DependencyContainer {

	dc := DependencyContainer{
		Configs: configs,

		Routes: routes,
	}

	return dc
}
