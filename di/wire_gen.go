// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/didiegovieira/go-benchmark-api/internal/infrastructure/api"
	"github.com/didiegovieira/go-benchmark-api/internal/infrastructure/api/handler"
	"github.com/didiegovieira/go-benchmark-api/internal/infrastructure/api/middleware"
	"github.com/didiegovieira/go-benchmark-api/internal/infrastructure/repository"
	"github.com/didiegovieira/go-benchmark-api/internal/test"
	"github.com/google/wire"
	"go.uber.org/mock/gomock"
)

// Injectors from wire.go:

func InitializeApi() (*api.Application, func(), error) {
	server := provideApiServer()
	presenter := provideApiPresenter()
	health := &handler.Health{
		Presenter: presenter,
	}
	client, cleanup, err := provideMongoDbClient()
	if err != nil {
		return nil, nil, err
	}
	benchmarkMongodb := repository.NewBenchmarkMongodb(client)
	useCase := provideTimeCalculateUseCase()
	baseUseCase := providePostSortingAlgorithmUseCase(benchmarkMongodb, useCase)
	postSortingAlgorithm := &handler.PostSortingAlgorithm{
		PostSortingAlgorithmUseCase: baseUseCase,
		Presenter:                   presenter,
	}
	requestValidation := &middleware.RequestValidation{
		Presenter: presenter,
	}
	application := &api.Application{
		Server:                      server,
		HealthHandler:               health,
		PostSortingAlgorithmHandler: postSortingAlgorithm,
		MiddlewareValidationRequest: requestValidation,
	}
	return application, func() {
		cleanup()
	}, nil
}

func InitializeTests(mockCtrl *gomock.Controller) (*test.Application, func(), error) {
	server := provideApiServer()
	presenter := provideApiPresenter()
	health := &handler.Health{
		Presenter: presenter,
	}
	client, cleanup, err := provideMongoDbClient()
	if err != nil {
		return nil, nil, err
	}
	benchmarkMongodb := repository.NewBenchmarkMongodb(client)
	useCase := provideTimeCalculateUseCase()
	baseUseCase := providePostSortingAlgorithmUseCase(benchmarkMongodb, useCase)
	postSortingAlgorithm := &handler.PostSortingAlgorithm{
		PostSortingAlgorithmUseCase: baseUseCase,
		Presenter:                   presenter,
	}
	requestValidation := &middleware.RequestValidation{
		Presenter: presenter,
	}
	application := &api.Application{
		Server:                      server,
		HealthHandler:               health,
		PostSortingAlgorithmHandler: postSortingAlgorithm,
		MiddlewareValidationRequest: requestValidation,
	}
	testApplication := &test.Application{
		Api:                 application,
		BenchmarkRepository: benchmarkMongodb,
		MongoClient:         client,
		MockCtrl:            mockCtrl,
	}
	return testApplication, func() {
		cleanup()
	}, nil
}

// wire.go:

var wireApiSet = wire.NewSet(
	commonSet,
	provideMongoDbClient,
	provideApiServer,

	provideBenchmarckRepositoryMongodb,

	provideTimeCalculateUseCase,
	providePostSortingAlgorithmUseCase,

	apiMiddlewaresSet,
	apiHandlersSet, wire.Struct(new(api.Application), "*"),
)

var wireTestSet = wire.NewSet(
	commonSet,
	provideMongoDbClient,
	provideApiServer,

	provideBenchmarckRepositoryMongodb,

	provideTimeCalculateUseCase,
	providePostSortingAlgorithmUseCase,

	apiMiddlewaresSet,
	apiHandlersSet, wire.Struct(new(api.Application), "*"), wire.Struct(new(test.Application), "*"),
)
