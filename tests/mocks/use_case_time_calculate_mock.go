// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/use_case/time_calculate_interface.go
//
// Generated by this command:
//
//	mockgen -source=./internal/application/use_case/time_calculate_interface.go -destination=tests/mocks/use_case_time_calculate_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/didiegovieira/go-benchmark-api/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockTimeCalculateUseCaseInterface is a mock of TimeCalculateUseCaseInterface interface.
type MockTimeCalculateUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTimeCalculateUseCaseInterfaceMockRecorder
}

// MockTimeCalculateUseCaseInterfaceMockRecorder is the mock recorder for MockTimeCalculateUseCaseInterface.
type MockTimeCalculateUseCaseInterfaceMockRecorder struct {
	mock *MockTimeCalculateUseCaseInterface
}

// NewMockTimeCalculateUseCaseInterface creates a new mock instance.
func NewMockTimeCalculateUseCaseInterface(ctrl *gomock.Controller) *MockTimeCalculateUseCaseInterface {
	mock := &MockTimeCalculateUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockTimeCalculateUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeCalculateUseCaseInterface) EXPECT() *MockTimeCalculateUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTimeCalculateUseCaseInterface) Execute(fn func(), name string) entity.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", fn, name)
	ret0, _ := ret[0].(entity.Result)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockTimeCalculateUseCaseInterfaceMockRecorder) Execute(fn, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTimeCalculateUseCaseInterface)(nil).Execute), fn, name)
}
